#!/usr/bin/env bash

PROJECT_ROOT=`git rev-parse --show-toplevel`
PROJECT_NAME=`basename "$PROJECT_ROOT"`

PROJECT_REPORTS=${PROJECT_ROOT}/out/reports
PROJECT_OUT=${PROJECT_ROOT}/out

usage() {
    echo "Usage: ./project <command> where <command> is one of:"
    echo "    * run   - Runs the current version from source without building"
    echo "    * build - Build the project, including tests"
    echo "    * test  - Test the project."
    echo "    * clean - Cleans the binary output, docs, etc."
}

if [[ $# < 1 ]]; then
    usage
    exit 1
fi

prepDirs() {
    mkdir -p ${PROJECT_OUT}/{bin,docs,reports}
    mkdir -p ${PROJECT_OUT}/bin/{linux,arm}-64/
}

clean() {
    rm -fr out/ 
    prepDirs
}

build() {
    prepDirs

    LDFLAGS="-X 'github.com/mortedecai/rivulets-of-go/internal/version.Version=0.0.0-alpha' -X 'github.com/mortedecai/rivulets-of-go/internal/version.Commit=$(git rev-parse --short HEAD)'"
    GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o out/bin/linux-64 cmd/rog/rog.go
    GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o out/bin/arm-64 cmd/rog/rog.go
}

run() {
    go run ${PROJECT_ROOT}/cmd/rog/rog.go
}

runTests() {
    prepDirs
    go test -coverprofile=${PROJECT_REPORTS}/coverage.out ./...
    go tool cover -func=${PROJECT_REPORTS}/coverage.out
    go tool cover -html=coverage.out -o ${PROJECT_REPORTS}/coverage.html
}

shopt -s nocasematch

case "${1}" in
  build)
    build $*
    ;;
  clean)
    clean
    ;;
  run)
    run
    ;;
  test)
    runTests
    ;;
  *)
    echo "Unknown command ${1:l}"
    ;;
esac


